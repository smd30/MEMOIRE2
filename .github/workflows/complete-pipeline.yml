name: 🚀 Pipeline DevOps Complet - MEMOIRE2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: memoire2-backend
  FRONTEND_IMAGE: memoire2-frontend

jobs:
  # 🔍 Job 1: Tests et Validation
  test:
    name: 🧪 Tests & Validation
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, xml, bcmath
        coverage: xdebug

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: 📦 Install Backend dependencies
      run: |
        cd backend
        composer install --prefer-dist --no-progress --no-suggest

    - name: 📝 Setup Backend environment
      run: |
        cd backend
        cp .env.example .env
        php artisan key:generate --force

    - name: 🗄️ Setup Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS testing;"

    - name: 🧪 Run Backend tests
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: root
      run: |
        cd backend
        php artisan test --coverage --coverage-clover=coverage.xml

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install Frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: 🧪 Run Frontend tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless

    - name: 🏗️ Build Frontend
      run: |
        cd frontend
        npm run build

    - name: 📦 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          backend/coverage.xml
          frontend/coverage/

  # 🐳 Job 2: Build et Push Docker Images
  build-and-push:
    name: 🐳 Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download Frontend build
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: frontend/coverage/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: 🏗️ Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # 🔍 Job 3: Analyse SonarCloud
  sonarcloud:
    name: 🔍 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📥 Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: .

    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🚀 Job 4: Déploiement Render
  deploy-render:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: [build-and-push, sonarcloud]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

  # 📊 Job 5: Tests de déploiement
  deployment-tests:
    name: 📊 Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-render
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 🏥 Health Check
      run: |
        echo "Testing deployment health..."
        sleep 30  # Wait for deployment to be ready
        
        # Test health endpoint
        curl -f https://${{ secrets.RENDER_SERVICE_URL }}/api/health || exit 1
        
        # Test database endpoint
        curl -f https://${{ secrets.RENDER_SERVICE_URL }}/api/health/database || exit 1
        
        echo "✅ Deployment tests passed!"

  # 📧 Job 6: Notifications
  notify:
    name: 📧 Notifications
    runs-on: ubuntu-latest
    needs: [deployment-tests]
    if: always()

    steps:
    - name: 📧 Success Notification
      if: needs.deployment-tests.result == 'success'
      run: |
        echo "🎉 Pipeline completed successfully!"
        echo "✅ Tests passed"
        echo "✅ Docker images pushed"
        echo "✅ SonarCloud analysis completed"
        echo "✅ Render deployment successful"
        echo "✅ Health checks passed"

    - name: 📧 Failure Notification
      if: needs.deployment-tests.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        echo "Check the logs for more details."
